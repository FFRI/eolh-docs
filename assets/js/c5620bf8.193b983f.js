"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[518],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1801:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:11},i="Create a custom rule",s={unversionedId:"tutorial-basics/create-a-custom-rule",id:"tutorial-basics/create-a-custom-rule",title:"Create a custom rule",description:"Eolh supports Go and Rego for writing detection rules.",source:"@site/docs/tutorial-basics/create-a-custom-rule.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/create-a-custom-rule",permalink:"/eolh-docs/docs/tutorial-basics/create-a-custom-rule",draft:!1,editUrl:"https://github.com/ffri/eolh-docs/tree/main/docs/tutorial-basics/create-a-custom-rule.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Eolh Rules",permalink:"/eolh-docs/docs/tutorial-basics/eolh-rules"},next:{title:"Tutorial - Extras",permalink:"/eolh-docs/docs/category/tutorial---extras"}},l={},c=[{value:"Write a detection rule in Go",id:"write-a-detection-rule-in-go",level:2},{value:"Write a detection rule in Rego",id:"write-a-detection-rule-in-rego",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-a-custom-rule"},"Create a custom rule"),(0,o.kt)("p",null,"Eolh supports Go and Rego for writing detection rules."),(0,o.kt)("h2",{id:"write-a-detection-rule-in-go"},"Write a detection rule in Go"),(0,o.kt)("p",null,"Let's write a rule to detect by process name."),(0,o.kt)("p",null,"Put ",(0,o.kt)("inlineCode",{parentName:"p"},"mimikatz.go")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"eolh/pkg/signatures/")," directory."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="mimikatz.go"',title:'"mimikatz.go"'},'package signatures\n\nimport (\n    "eolh/pkg/detect"\n    "eolh/pkg/protocol"\n    "eolh/pkg/trace"\n    "fmt"\n    "strings"\n)\n\ntype Mimikatz struct {\n    cb detect.SignatureHandler\n}\n\nfunc (sig *Mimikatz) GetMetadata() (detect.SignatureMetadata, error) {\n    return detect.SignatureMetadata{\n        ID:          "CUSTOM-1",\n        Version:     "1",\n        Name:        "Mimikatz",\n        EventName:   "mimikatz",\n        Description: "Mimikatz is found.",\n        Properties: map[string]interface{}{\n            "Severity": 4,\n        },\n    }, nil\n}\n\nfunc (sig *Mimikatz) GetSelectedEvents() ([]detect.SignatureEventSelector, error) {\n    return []detect.SignatureEventSelector{{\n        Source: "eolh", Name: "*", Origin: "*",\n    }}, nil\n}\n\nfunc (sig *Mimikatz) Init(ctx detect.SignatureContext) error {\n    sig.cb = ctx.Callback\n    return nil\n}\n\nfunc (sig *Mimikatz) OnEvent(event protocol.Event) error {\n    e, ok := event.Payload.(trace.Event)\n    if !ok {\n        return fmt.Errorf("failed to cast event\'s payload")\n    }\n    name := e.ProcessName\n    if !strings.Contains(name, "mimikatz.exe")  {\n        return nil\n    }\n    metadata, err := sig.GetMetadata()\n    if err != nil {\n        return err\n    }\n    message := fmt.Sprintf("mimikatz.exe found")\n    sig.cb(detect.Finding{\n        SigMetadata: metadata,\n        Event:       event,\n        Data:        nil,\n        Msg:         message,\n    })\n    return nil\n}\n\nfunc (sig *Mimikatz) OnSignal(signal detect.Signal) error {\n    return nil\n}\n\nfunc (sig *Mimikatz) Close() {}\n')),(0,o.kt)("p",null,"Then register the detection rule by modifying ",(0,o.kt)("inlineCode",{parentName:"p"},"eolh/pkg/signatures/signature.go")," as follows."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="signature.go"',title:'"signature.go"'},"func findGoSigs() []detect.Signature {\n    var sigs []detect.Signature\n    sigs = append(sigs, &Drop{})\n    sigs = append(sigs, &PidSpoofing{})\n    sigs = append(sigs, &CryptoMiner{})\n    // Add your signatures below\n    // sigs = append(sigs, &YOUR_SIGNATURE{})\n+   sigs = append(sigs, &Mimikatz{})\n    return sigs\n}\n")),(0,o.kt)("p",null,"Then build Eolh."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"env GOOS=windows GOARCH=amd64 go build -o eolh.exe cmd/main.go\n")),(0,o.kt)("p",null,"And build the container image and push the image to your repository."),(0,o.kt)("p",null,"Now Eolh can detect ",(0,o.kt)("inlineCode",{parentName:"p"},"mimikatz.exe"),". Note of course that detection by process name can quite easily be bypassed."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"eolh/trace.Event")," type has the following members for detection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Event struct {\n    ProcessID       int `json:"processId"` // Process ID\n    ThreadID        int `json:"threadId"` // Thread ID (if present)\n    ParentProcessID int `json:"parentProcessId"` // Parent Process ID\n    ProcessName string     `json:"processName"` // Process Name\n    Cmdline     string     `json:"cmdLine"` // CMD Line Argument\n    RawEvent     etw.Event   `json:"raw,omitempty"` // Raw Event Data of the source ETW Event\n}\n')),(0,o.kt)("p",null,"So you can create your own detection rule using this information."),(0,o.kt)("h2",{id:"write-a-detection-rule-in-rego"},"Write a detection rule in Rego"),(0,o.kt)("p",null,"When you make custom detection rules in Go, you need to modify Eolh code and to rebuild Eolh binary.\nTo avoid that, you can write the rules in Rego."),(0,o.kt)("p",null,"If you have a list of C2 server addresses, you can detect communications to them."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rego",metastring:'title="c2.rego"',title:'"c2.rego"'},'package eolh.CUSTOM_2\n\n__rego_metadoc__ := {\n        "id": "CUSTOM-2",\n        "version": "0.1.0",\n        "name": "C2 Connection",\n        "eventName": "c2_connection",\n        "description": "Connection to C2 is Detected.",\n        "tags": ["windows", "container", "network"],\n        "properties": {\n                "Severity": 4,\n                "MITRE ATT&CK": "Application Layer Protocol: Web Protocols",\n        },\n}\n\neolh_selected_events[eventSelector] {\n        eventSelector := {\n                "source": "eolh",\n                "name": "*",\n        }\n}\n\neolh_match {\n        arr := ["x.x.x.x"]\n        arr[x] == input.raw.EventData.dport\n}\n')),(0,o.kt)("p",null,"Remember that Rego rules may perform less well than Go rules."),(0,o.kt)("p",null,"To activate the Rego rule, put it in the ",(0,o.kt)("inlineCode",{parentName:"p"},"signatures/rego")," directory."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# some-directory/\n#  \u3000    \u251c eolh.exe\n#\u3000      \u2514 signatures/rego/c2.rego\n")))}d.isMDXComponent=!0}}]);