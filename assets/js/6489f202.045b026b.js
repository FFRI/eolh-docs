"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[964],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),d=o,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return t?a.createElement(g,r(r({ref:n},u),{},{components:t})):a.createElement(g,r({ref:n},u))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3021:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(7462),o=(t(7294),t(3905));const i={sidebar_position:8},r="Centralized Logging",l={unversionedId:"tutorial-basics/centralized-logging",id:"tutorial-basics/centralized-logging",title:"Centralized Logging",description:"Running kubectl logs in your terminal is fine for simple logging checks, but a more sophisticated method is needed to achieve better observability. That is, centralized logging.",source:"@site/docs/tutorial-basics/centralized-logging.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/centralized-logging",permalink:"/eolh-docs/docs/tutorial-basics/centralized-logging",draft:!1,editUrl:"https://github.com/ffri/eolh-docs/tree/main/docs/tutorial-basics/centralized-logging.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Create an EKS Cluster with a Windows Container",permalink:"/eolh-docs/docs/tutorial-basics/create-an-eks-cluster"},next:{title:"Deploy Eolh",permalink:"/eolh-docs/docs/tutorial-basics/deploy-eolh"}},s={},c=[{value:"Centralized Logging using Fluent Bit and CloudWatch Logs",id:"centralized-logging-using-fluent-bit-and-cloudwatch-logs",level:2},{value:"Create a Namespace for Fluent Bit",id:"create-a-namespace-for-fluent-bit",level:3},{value:"Configure an IAM policy",id:"configure-an-iam-policy",level:3},{value:"Create a Config Maps",id:"create-a-config-maps",level:3},{value:"Deploy Fluent Bit",id:"deploy-fluent-bit",level:3},{value:"Other Solutions",id:"other-solutions",level:2},{value:"Reference",id:"reference",level:2}],u={toc:c},p="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"centralized-logging"},"Centralized Logging"),(0,o.kt)("p",null,"Running ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl logs")," in your terminal is fine for simple logging checks, but a more sophisticated method is needed to achieve better observability. That is, centralized logging."),(0,o.kt)("h2",{id:"centralized-logging-using-fluent-bit-and-cloudwatch-logs"},"Centralized Logging using Fluent Bit and CloudWatch Logs"),(0,o.kt)("p",null,"We will build a centralized logging system according to ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/jp/blogs/containers/centralized-logging-for-windows-containers-on-amazon-eks-using-fluent-bit/"},"the reference article"),"."),(0,o.kt)("h3",{id:"create-a-namespace-for-fluent-bit"},"Create a Namespace for Fluent Bit"),(0,o.kt)("p",null,"Create a yaml file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="namespace.yaml"',title:'"namespace.yaml"'},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: amazon-cloudwatch\n  labels:\n    name: amazon-cloudwatch\n")),(0,o.kt)("p",null,"Then create the namespace:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f namespace.yaml\n")),(0,o.kt)("h3",{id:"configure-an-iam-policy"},"Configure an IAM policy"),(0,o.kt)("p",null,"Create an IAM policy with the following permissions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="fluent-bit-policy.json"',title:'"fluent-bit-policy.json"'},'{\n    "Version": "2012-10-17",\n    "Statement": [\n    {\n        "Effect": "Allow",\n        "Action": [\n            "logs:CreateLogStream",\n            "logs:CreateLogGroup",\n            "logs:PutLogEvents"\n        ],\n        "Resource": "*"\n    }\n    ]\n}\n')),(0,o.kt)("p",null,"You can do this by running the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"aws iam create-policy --policy-name fluent-bit-policy --policy-document file://fluent-bit-policy.json\n")),(0,o.kt)("p",null,"If your EKS cluster does not have an IAM OIDC provider, then create it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"eksctl utils associate-iam-oidc-provider  --region us-east-1 --cluster eolh-tutorial --approve \n")),(0,o.kt)("p",null,"Then create IAM service account:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Replace <FLUENT_BIT_POLICY_ARN> with the ARN of fluent-bit-policy\neksctl create iamserviceaccount --cluster eolh-tutorial \\\n--region us-east-1 \\\n--attach-policy-arn <FLUENT_BIT_POLICY_ARN> \\\n--name fluent-bit-windows \\\n--namespace amazon-cloudwatch \\\n--approve\n")),(0,o.kt)("h3",{id:"create-a-config-maps"},"Create a Config Maps"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ClusterName=eolh-tutorial\nRegionName=us-east-1\nFluentBitReadFromHead='Off'\n\nkubectl create configmap fluent-bit-cluster-info \\\n--from-literal=cluster.name=${ClusterName} \\\n--from-literal=logs.region=${RegionName} \\\n--from-literal=read.head=${FluentBitReadFromHead} -n amazon-cloudwatch \n")),(0,o.kt)("h3",{id:"deploy-fluent-bit"},"Deploy Fluent Bit"),(0,o.kt)("p",null,"Now you can deploy Fluent Bit on your cluster."),(0,o.kt)("p",null,"Create a manifest file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="fluent-bit-daemon-set.yaml"',title:'"fluent-bit-daemon-set.yaml"'},'---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: fluent-bit-windows-role\n  namespace: amazon-cloudwatch\nrules:\n  - nonResourceURLs:\n      - /metrics\n    verbs:\n      - get\n  - apiGroups: [""]\n    resources:\n      - namespaces\n      - pods\n      - pods/logs\n      - nodes\n      - nodes/proxy\n    verbs: ["get", "list", "watch"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: fluent-bit-windows-role-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: fluent-bit-windows-role\nsubjects:\n# Assuming that the Service Account was created earlier with name fluent-bit-windows.\n- kind: ServiceAccount\n  name: fluent-bit-windows\n  namespace: amazon-cloudwatch\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: fluent-bit-windows-config\n  namespace: amazon-cloudwatch\n  labels:\n    k8s-app: fluent-bit-windows\ndata:\n  fluent-bit.conf: |\n    [SERVICE]\n        Flush                       5\n        Log_Level                   info\n        Daemon                      off\n        net.dns.resolver            LEGACY\n        Parsers_File                parsers.conf\n        \n    @INCLUDE application-log.conf\n \n  application-log.conf: |\n    [INPUT]\n        Name                tail\n        Tag                 application.*\n        Exclude_Path        C:\\\\var\\\\log\\\\containers\\\\fluent-bit*\n        Path                C:\\\\var\\\\log\\\\containers\\\\*.log\n        Docker_Mode         On\n        Docker_Mode_Flush   5\n        Docker_Mode_Parser  container_firstline\n        multiline.parser    docker, cri\n        DB                  C:\\\\var\\\\fluent-bit\\\\state\\\\flb_container.db\n        Read_from_Head      ${READ_FROM_HEAD}\n \n    [INPUT]\n        Name                tail\n        Tag                 application.*\n        Path                C:\\\\var\\\\log\\\\containers\\\\fluent-bit*\n        multiline.parser    docker, cri\n        DB                  C:\\\\var\\\\fluent-bit\\\\state\\\\flb_log.db\n        Read_from_Head      ${READ_FROM_HEAD}\n \n    [FILTER]\n        Name                kubernetes\n        Match               application.*\n        Kube_URL            https://kubernetes.default.svc.cluster.local:443\n        Kube_Tag_Prefix     application.C.var.log.container.\n        Merge_Log           On\n        Merge_Log_Key       log_processed\n        K8S-Logging.Parser  On\n        K8S-Logging.Exclude Off\n        Labels              Off\n        Annotations         Off\n        Use_Kubelet         Off\n        Buffer_Size         0\n \n    [OUTPUT]\n        Name                cloudwatch_logs\n        Match               application.*_default_*\n        region              ${AWS_REGION}\n        log_group_name      /aws/containerinsights/${CLUSTER_NAME}/default\n        log_stream_prefix   ${HOST_NAME}-\n        auto_create_group   true\n        extra_user_agent    container-insights\n \n    [OUTPUT]\n        Name                cloudwatch_logs\n        Match               application.*_amazon-cloudwatch_*\n        region              ${AWS_REGION}\n        log_group_name      /aws/containerinsights/${CLUSTER_NAME}/amazon-cloudwatch\n        log_stream_prefix   ${HOST_NAME}-\n        auto_create_group   true\n        extra_user_agent    container-insights\n \n  parsers.conf: |\n    [PARSER]\n        Name                docker\n        Format              json\n        Time_Key            time\n        Time_Format         %Y-%m-%dT%H:%M:%S.%LZ\n \n    [PARSER]\n        Name                container_firstline\n        Format              regex\n        Regex               (?<log>(?<="log":")\\S(?!\\.).*?)(?<!\\\\)".*(?<stream>(?<="stream":").*?)".*(?<time>\\d{4}-\\d{1,2}-\\d{1,2}T\\d{2}:\\d{2}:\\d{2}\\.\\w*).*(?=})\n        Time_Key            time\n        Time_Format         %Y-%m-%dT%H:%M:%S.%LZ\n \n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: fluent-bit-windows\n  namespace: amazon-cloudwatch\n  labels:\n    k8s-app: fluent-bit-windows\n    version: v1\n    kubernetes.io/cluster-service: "true"\nspec:\n  selector:\n    matchLabels:\n      k8s-app: fluent-bit-windows\n  template:\n    metadata:\n      labels:\n        k8s-app: fluent-bit-windows\n        version: v1\n        kubernetes.io/cluster-service: "true"\n    spec:\n      containers:\n      - name: fluent-bit-windows\n        image: public.ecr.aws/aws-observability/aws-for-fluent-bit:windowsservercore-latest\n        imagePullPolicy: Always\n        env:\n          - name: AWS_REGION\n            valueFrom:\n              configMapKeyRef:\n                name: fluent-bit-cluster-info\n                key: logs.region\n          - name: CLUSTER_NAME\n            valueFrom:\n              configMapKeyRef:\n                name: fluent-bit-cluster-info\n                key: cluster.name\n          - name: HOST_NAME\n            valueFrom:\n              fieldRef:\n                fieldPath: spec.nodeName\n          - name: READ_FROM_HEAD\n            valueFrom:\n              configMapKeyRef:\n                name: fluent-bit-cluster-info\n                key: read.head\n        resources:\n          limits:\n            memory: 600Mi\n          requests:\n            cpu: 500m\n            memory: 600Mi\n        volumeMounts:\n        # Only read only access to the following mounts is required\n        - name: fluentbitstate\n          mountPath: C:\\var\\fluent-bit\\state\n        - name: varlog\n          mountPath: C:\\var\\log\n          readOnly: true\n        - name: varlibdockercontainers\n          mountPath: C:\\ProgramData\\docker\\containers\n          readOnly: true\n        - name: fluent-bit-config\n          mountPath: C:\\fluent-bit\\etc\\\n          readOnly: true          \n      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: fluentbitstate\n        hostPath:\n          path: C:\\var\n      - name: varlog\n        hostPath:\n          path: C:\\var\\log\n      - name: varlibdockercontainers\n        hostPath:\n          path: C:\\ProgramData\\docker\\containers\n      - name: fluent-bit-config\n        configMap:\n          name: fluent-bit-windows-config\n      nodeSelector:\n        kubernetes.io/os: windows          \n      serviceAccountName: fluent-bit-windows\n')),(0,o.kt)("p",null,"Then deploy it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f fluent-bit-daemon-set.yaml\n")),(0,o.kt)("p",null,"Open AWS Management Console and go to the CloudWatch Logs ",(0,o.kt)("inlineCode",{parentName:"p"},"/aws/containerinsights/eolh-tutorial/default\n")," group."),(0,o.kt)("h2",{id:"other-solutions"},"Other Solutions"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://grafana.com/oss/loki/"},"Grafana Loki")," is often used in the context of observability."),(0,o.kt)("p",null,"However, to our knowledge, you cannot use Loki with Windows containers/nodes. This is because although the Loki agent needs to work on each Node, it does not work on Windows nodes."),(0,o.kt)("p",null,"Another possible solution would be to send logs from Fluent Bit to ",(0,o.kt)("a",{parentName:"p",href:"https://www.elastic.co/elasticsearch"},"ElasticSearch")," and visualize them at ",(0,o.kt)("a",{parentName:"p",href:"https://www.elastic.co/kibana"},"Kibana")," or ",(0,o.kt)("a",{parentName:"p",href:"https://grafana.com/oss/grafana/"},"Grafana"),"."),(0,o.kt)("h2",{id:"reference"},"Reference"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/jp/blogs/containers/centralized-logging-for-windows-containers-on-amazon-eks-using-fluent-bit/"},"https://aws.amazon.com/jp/blogs/containers/centralized-logging-for-windows-containers-on-amazon-eks-using-fluent-bit/")))}m.isMDXComponent=!0}}]);