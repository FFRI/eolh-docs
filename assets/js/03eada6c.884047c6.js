"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[160],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return n?r.createElement(f,a(a({ref:t},d),{},{components:n})):r.createElement(f,a({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4579:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:1},a="Detect Tor Connection",c={unversionedId:"tutorial-extras/detect-tor-connection",id:"tutorial-extras/detect-tor-connection",title:"Detect Tor Connection",description:"In this section, we will leverage Rego to detect Tor connection. The detection method used here is based on the following article. That is, we fetch Tor nodes information every 30 minutes, then we make a Rego detection rule by the addresses.",source:"@site/docs/tutorial-extras/detect-tor-connection.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/detect-tor-connection",permalink:"/eolh-docs/docs/tutorial-extras/detect-tor-connection",draft:!1,editUrl:"https://github.com/ffri/eolh-docs/tree/main/docs/tutorial-extras/detect-tor-connection.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial - Extras",permalink:"/eolh-docs/docs/category/tutorial---extras"},next:{title:"ETW Only Mode",permalink:"/eolh-docs/docs/tutorial-extras/etw-only"}},s={},l=[],d={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"detect-tor-connection"},"Detect Tor Connection"),(0,o.kt)("p",null,"In this section, we will leverage Rego to detect Tor connection. The detection method used here is based on the following article. That is, we fetch Tor nodes information every 30 minutes, then we make a Rego detection rule by the addresses."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://sysdig.com/blog/detect-tor-network-connection-falco/"},"https://sysdig.com/blog/detect-tor-network-connection-falco/")),(0,o.kt)("p",null,"First, make a Go program to create rules."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="exittor.go"',title:'"exittor.go"'},'package main\n\nimport (\n        "fmt"\n        "io"\n        "net/http"\n        "os"\n        "strings"\n)\n\nvar url string = "https://check.torproject.org/exit-addresses"\n\nvar output string = `package eolh.CUSTOM_2\n\n__rego_metadoc__ := {\n        "id": "CUSTOM-6",\n        "version": "0.1.0",\n        "name": "Tor-Connection",\n        "eventName": "tor_connection",\n        "description": "Connection to Tor Exit Node is Detected.",\n        "tags": ["windows", "container", "tor", "network"],\n        "properties": {\n                "Severity": 4,\n                "MITRE ATT&CK": "Proxy: Multi-hop Proxy",\n        },\n}\n\neolh_selected_events[eventSelector] {\n        eventSelector := {\n                "source": "eolh",\n                "name": "*",\n        }\n}\n\neolh_match {\n        arr := %s\n        arr[x] == input.raw.EventData.dport\n}`\n\nfunc main() {\n        resp, err := http.Get(url)\n        if err != nil {\n                fmt.Println("Err")\n                os.Exit(1)\n        }\n        defer resp.Body.Close()\n        addrs := []string{}\n        byteArray, err := io.ReadAll(resp.Body)\n        if err != nil {\n                fmt.Println("Err")\n                os.Exit(1)\n        }\n        stringList := strings.Split(string(byteArray), "\\n")\n        for _, sentence := range stringList {\n                if strings.HasPrefix(sentence, "ExitAddress") {\n                        addrs = append(addrs, strings.Split(sentence, " ")[1])\n                }\n        }\n        f, err := os.Create("exittor.rego")\n        if err != nil {\n                os.Exit(1)\n        }\n        f.Write([]byte(fmt.Sprintf(output, "["+strings.Join(addrs[:], ",")+"]")))\n}\n')),(0,o.kt)("p",null,"After compiling the code by ",(0,o.kt)("inlineCode",{parentName:"p"},"env GOOS=windows GOARCH=amd64 go build -o exittor.exe exittor.go"),", you got ",(0,o.kt)("inlineCode",{parentName:"p"},"exittor.exe"),". This executable produces ",(0,o.kt)("inlineCode",{parentName:"p"},"exittor.rego")," rule file.\nTherefore, What you should do is run ",(0,o.kt)("inlineCode",{parentName:"p"},"exittor.exe")," every 30 minutes and read ",(0,o.kt)("inlineCode",{parentName:"p"},"exittor.rego")," into Eolh."),(0,o.kt)("p",null,"The easiest way to do this is to create an executable file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "bufio"\n    "fmt"\n    "os/exec"\n    "time"\n)\n\nfunc main() {\n    for {\n        cmd := exec.Command("./exittor.exe")\n        stdout, _ := cmd.StdoutPipe()\n        go func() {\n            scanner := bufio.NewScanner(stdout)\n            for scanner.Scan() {\n                line := scanner.Text()\n                fmt.Println(line)\n            }\n        }()\n        cmd.Start()\n        cmd.Wait()\n        cmd = exec.Command("./eolh.exe")\n        stdout, _ = cmd.StdoutPipe()\n        go func() {\n            scanner := bufio.NewScanner(stdout)\n            for scanner.Scan() {\n                line := scanner.Text()\n                fmt.Println(line)\n            }\n        }()\n        cmd.Start()\n        time.Sleep(30 * time.Minute)\n        cmd.Process.Kill()\n    }\n}\n')),(0,o.kt)("p",null,"In using this, it would be good to have some method of ensuring integrity, for example by checking cryptographic hash values of ",(0,o.kt)("inlineCode",{parentName:"p"},"exittor.exe")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"eolh.exe"),"."))}u.isMDXComponent=!0}}]);